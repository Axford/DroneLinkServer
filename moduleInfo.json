{
    "Drone": {
        "type": [
            "Drone"
        ],
        "description": [
            "Base class for Drone modules"
        ],
        "filename": [
            "../DroneNode/src/droneModules/DroneModule.h"
        ]
    },
    "Depth": {
        "type": [
            "Depth"
        ],
        "inherits": [
            "Drone"
        ],
        "description": [
            "Manages a simple Depth sensor (sonar transducer) controlled via Trigger and Echo pins"
        ],
        "guide": [
            "Notes:\nIn the oceans the speed of sound varies between 1,450 and 1,570 metres per second or 0.145 cm per microsecond.\nGiven the transducer requires the sound pulse to travel to the bottom and back the effective distance per microsend is actually halved or 0.0725 cm per microsecond."
        ],
        "config": [
            "// New Depth sensor bound to channel 30\nDepth.new 30\n  name \"Depth\"\n  status true         // enabled\n  interval 1000       // sample once per second\n  pins OUT0_0 OUT0_1  // tigger and echo pins\n  limits 0.25 10      // set sensor range to min=0.25m, max=10m\n  speed 1480          // speed of sound in fresh water = 1480m/s\n  $location [@>5.8]   // subscribe to GPS location\n  distance 5          // publish log entires every 5m\n\n  .publish \"depth\"    // publish the measured depth\n  .publish \"log\"      // publish a combined log entry containing GPS location and depth\n\n  // .publish \"speed\"\n  // .publish \"pins\"\n  // .publish \"limits\"\n  // .publish \"distance\"\n.done"
        ],
        "pub": [
            {
                "address": 10,
                "type": "u8",
                "numValues": 2,
                "name": "pins",
                "description": "Pin connections for the depth module (Trigger, Echo)"
            },
            {
                "address": 11,
                "type": "f",
                "numValues": 1,
                "name": "speed",
                "description": "Set the speed of sound in water (default 1480 for fresh water)"
            },
            {
                "address": 12,
                "type": "f",
                "numValues": 2,
                "name": "limits",
                "description": "Min and max depth limits in meters (Default 0.25 10)"
            },
            {
                "address": 13,
                "type": "f",
                "numValues": 1,
                "name": "depth",
                "description": "Measured depth (or zero if unable to measure)"
            },
            {
                "address": 14,
                "type": "f",
                "numValues": 3,
                "name": "log",
                "description": "Composite log entry combining current GPS location and depth reading into a single param"
            },
            {
                "address": 15,
                "type": "f",
                "numValues": 1,
                "name": "distance",
                "description": "Minimum distance between log entires.  Will only publish a fresh log entry if more than distance from last sample location.  Default 0m."
            }
        ],
        "sub": [
            {
                "address": 20,
                "addrAddress": 21,
                "type": "f",
                "numValues": 2,
                "name": "location",
                "description": "Current location from GPS"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/DepthModule.h"
        ]
    },
    "Diagnostic": {
        "type": [
            "Diagnostic"
        ],
        "inherits": [
            "I2CBaseModule"
        ],
        "description": [
            "Manages a Diagnostic 128x64 I2C display (1306 driver)"
        ],
        "config": [
            "DIAGNOSTIC.new 6\n  name \"Diagnostic\"\n  interval 200\n  bus 0\n.done"
        ],
        "filename": [
            "../DroneNode/src/droneModules/DiagnosticModule.h"
        ]
    },
    "HMC5883L": {
        "type": [
            "HMC5883L"
        ],
        "inherits": [
            "I2CBaseModule"
        ],
        "description": [
            "Manages a HMC5883L I2C Compass"
        ],
        "config": [
            "HMC5883L.new 6\n  name \"Compass\"\n  interval 200\n  bus 0\n  status 1\n  calibX -3.5 0 2.3\n  calibY -3.6 0 1.7\n  // default location\n  location -1.8 52 100\n  //$location [@>GPS.location]\n  $location [@>5.8]\n  .publish \"heading\"\n  .publish \"vector\"\n  .publish \"calibX\"\n  .publish \"calibY\"\n.done"
        ],
        "pub": [
            {
                "address": 10,
                "type": "f",
                "numValues": 4,
                "name": "vector",
                "description": "Raw magnetic field vector"
            },
            {
                "address": 11,
                "type": "f",
                "numValues": 1,
                "name": "heading",
                "description": "Heading adjusted for magnetic declination"
            },
            {
                "address": 12,
                "type": "f",
                "numValues": 1,
                "name": "declination",
                "description": "Current declination value"
            },
            {
                "address": 13,
                "type": "f",
                "numValues": 3,
                "name": "calibX",
                "description": "Min, center and max magnetic readings for the X axis"
            },
            {
                "address": 14,
                "type": "f",
                "numValues": 3,
                "name": "calibY",
                "description": "Min, center and max magnetic readings for the Y axis"
            },
            {
                "address": 15,
                "type": "f",
                "numValues": 1,
                "name": "trim",
                "description": "Manual calibration value to adjust heading to match hull (e.g. for a misaligned physical mount)"
            },
            {
                "address": 18,
                "type": "f",
                "numValues": 4,
                "name": "limits",
                "description": "Averaged limits at the four quadrants, used to refine the calibration onoine"
            }
        ],
        "sub": [
            {
                "address": 16,
                "addrAddress": 17,
                "type": "f",
                "numValues": 2,
                "name": "location",
                "description": "Current location from GPS"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/HMC5883LModule.h"
        ]
    },
    "Management": {
        "type": [
            "Management"
        ],
        "inherits": [
            "Drone"
        ],
        "description": [
            "Provides overall system management and a pub/sub interface to the DroneModuleManager"
        ],
        "pub": [
            {
                "address": 8,
                "type": "c",
                "numValues": 1,
                "name": "hostname",
                "description": "Hostname of the device"
            },
            {
                "address": 9,
                "type": "c",
                "numValues": 1,
                "name": "build",
                "description": "Git commit hash at the time the firmware was built"
            },
            {
                "address": 10,
                "type": "u8",
                "numValues": 1,
                "name": "reset",
                "description": "Set to 1 to trigger a reset"
            },
            {
                "address": 11,
                "type": "u32",
                "numValues": 1,
                "name": "heap",
                "description": "Current size of heap (i.e. free memory)"
            },
            {
                "address": 12,
                "type": "u8",
                "numValues": 4,
                "name": "IP",
                "description": "IP address"
            },
            {
                "address": 13,
                "type": "u32",
                "numValues": 1,
                "name": "uptime",
                "description": "Uptime in seconds"
            },
            {
                "address": 14,
                "type": "f",
                "numValues": 1,
                "name": "publishRate",
                "description": "Rate of messages published per second"
            },
            {
                "address": 15,
                "type": "u32",
                "numValues": 1,
                "name": "choked",
                "description": "Number of times a channel queue has choked (rejected a msg becuse full)"
            },
            {
                "address": 16,
                "type": "u8",
                "numValues": 1,
                "name": "discovery",
                "description": "Enable/disable node discovery process.  Set to 1 to enable, or 0 to disable."
            },
            {
                "address": 17,
                "type": "c",
                "numValues": 1,
                "name": "macro",
                "description": "Set to the path to a macro file (.txt file) to run the associated macro.  Note - the macro must be loaded first (e.g. via config.txt)."
            },
            {
                "address": 18,
                "type": "u8",
                "numValues": 1,
                "name": "wifi",
                "description": "Enable/disable wifi. Set to 1 to enable, or 0 to disable."
            },
            {
                "address": 19,
                "type": "u32",
                "numValues": 1,
                "name": "sleep",
                "description": "How long to sleep in main loop - uses light sleep"
            },
            {
                "address": 20,
                "type": "u32",
                "numValues": 1,
                "name": "cpu",
                "description": "CPU freq in MHz, valid values 240, 160, 80"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/ManagementModule.h"
        ]
    },
    "Motor": {
        "type": [
            "Motor"
        ],
        "inherits": [
            "Drone"
        ],
        "description": [
            "Manages a Motor via an H Bridge module using PWM"
        ],
        "config": [
            "Motor.new 11\n  name \"LeftMotor\"\n  interval 50\n  pins OUT0_0 OUT0_1 DAC0_0\n  PWMChannel 15\n  limits -0.7 0.7\n  deadband 0.3\n  $speed [@>10.8]\n\n  // publish\n  .publish \"speed\"\n.done"
        ],
        "pub": [
            {
                "address": 10,
                "type": "u8",
                "numValues": 3,
                "name": "pins",
                "description": "Pin connections for the H Bridge (A, B, EN)"
            },
            {
                "address": 11,
                "type": "u8",
                "numValues": 1,
                "name": "PWMChannel",
                "description": "Which ESP32 PWM channel to use (default 15)"
            },
            {
                "address": 12,
                "type": "f",
                "numValues": 2,
                "name": "limits",
                "description": "Min and max speed limits in range -1 to 1 (default -1 1)"
            },
            {
                "address": 13,
                "type": "f",
                "numValues": 1,
                "name": "deadband",
                "description": "Input range within which to set the motor output to zero, interpreted abs(input).  Default 0.3"
            }
        ],
        "sub": [
            {
                "address": 8,
                "addrAddress": 9,
                "type": "f",
                "numValues": 1,
                "name": "speed",
                "description": "Desired Motor speed in range -1 to 1"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/MotorModule.h"
        ]
    },
    "NMEA": {
        "type": [
            "NMEA"
        ],
        "inherits": [
            "Drone"
        ],
        "description": [
            "Manages a serial NMEA GPS device"
        ],
        "config": [
            "NMEA.new 7\n  name \"GPS\"\n  interval 1000\n  port 2\n  baud 9600\n  .publish \"location\"\n  .publish \"satellites\"\n  .publish \"HDOP\"\n.done"
        ],
        "pub": [
            {
                "address": 8,
                "type": "f",
                "numValues": 2,
                "name": "location",
                "description": "Current GPS location"
            },
            {
                "address": 9,
                "type": "u8",
                "numValues": 1,
                "name": "satellites",
                "description": "Number of satellites used for fix"
            },
            {
                "address": 10,
                "type": "f",
                "numValues": 1,
                "name": "heading",
                "description": "Current heading over ground"
            },
            {
                "address": 11,
                "type": "f",
                "numValues": 1,
                "name": "speed",
                "description": "Current speed over ground"
            },
            {
                "address": 12,
                "type": "f",
                "numValues": 1,
                "name": "HDOP",
                "description": "Current Horizontal Dilution of Precision"
            },
            {
                "address": 13,
                "type": "u8",
                "numValues": 1,
                "name": "port",
                "description": "Which serial port to use (0,1 or 2)"
            },
            {
                "address": 14,
                "type": "u32",
                "numValues": 1,
                "name": "baud",
                "description": "Baud rate to use, normally 9600"
            },
            {
                "address": 15,
                "type": "f",
                "numValues": 3,
                "name": "fix",
                "description": "Fix location - to use as basis for differential GPS signal"
            }
        ],
        "sub": [
            {
                "address": 20,
                "addrAddress": 21,
                "type": "f",
                "numValues": 3,
                "name": "correction",
                "description": "If fix location is set then this is the difference between live GPS and known location, for other nodes to subscribe to.  If no fix location, then this can be subbed to a base station correction param."
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/NMEAModule.h"
        ]
    },
    "Nav": {
        "type": [
            "Nav"
        ],
        "inherits": [
            "Drone"
        ],
        "description": [
            "Managen navigation between waypoints accounting for crosswind drift"
        ],
        "guide": [
            "Target waypoints are defined in terms of Lon Lat and target Radius in meters."
        ],
        "config": [
            "Nav.new 9\n  name \"Nav\"\n  status 1\n  interval 50\n  $location [@>7.8]\n  target -1.7458734889 51.541622044 5\n  crosswind 0.2\n  correction 20\n  wind 0\n  .publish \"target\"\n  .publish \"location\"\n  .publish \"heading\"\n  .publish \"distance\"\n  .publish \"mode\"\n  .publish \"last\"\n  .publish \"home\"\n  .publish \"crosstrack\"\n  .publish \"correction\"\n  .publish \"wind\"\n  .publish \"crosswind\"\n  .publish \"adjHeading\"\n.done"
        ],
        "filename": [
            "../DroneNode/src/droneModules/NavModule.h"
        ]
    },
    "Polar": {
        "type": [
            "Polar"
        ],
        "inherits": [
            "Drone"
        ],
        "description": [
            "Sail polar calibration module"
        ],
        "guide": [
            "<p>Sail on a variety of headings relative to the wind, measuring speed over ground\nrelative to wind speed and aggregating results to build a polar plot of saiiing performance vs heading.</p>\n\n<p>When in passthrough mode, will simply pass the Sailor heading onto its output (module chaining).  When active, will bypass the Sailor module and generate target headings.</p>\n\n<p>In either mode, the Sailor module is left to generate the sheet command based on\nrelative wind direction.  This may need a separate calibration process.</p>\n\n\n<p>Algorithm:</p>\n<ul>\n <li>if outside the inner threshold - turn onto a heading that will orbit the target in a clockwise direction (configurable?) at distance of mid threshold, once speed over ground is over threshold, then select a new heading that goes from current location through the center of the target.\n <li>when crossing the inner threshold heading inward - record the start location and time.\n <li>when crossing the inner threshold heading outward - calculate effective heading and if close enough to target heading, then record the end location and time, compute the average speed and add to polar info.\n\n <li>if pass the outer threshold heading out, abort and switch to passthrough mode to allow\n nav/sailor modules to take over\n <li>if pass the outer threshold heading inward, switch to active mode\n</ul>"
        ],
        "config": [
            "Polar.new 22\n  name \"Polar\"\n  interval 1000\n  $location [@>50.9]\n  $wind [@>50.10]\n  windSpeed 1\n  $heading [@>12.16]\n  target -1.7454870 51.5418469\n  threshold -1 100\n  radius 10 20 50\n  mode 1\n  .publish \"location\"\n  .publish \"SOG\"\n  .publish \"wind\"\n  .publish \"windSpeed\"\n  .publish \"heading\"\n  .publish \"adjHeading\"\n  .publish \"mode\"\n  .publish \"target\"\n  .publish \"threshold\"\n  .publish \"radius\"\n  .publish \"samples\"\n  .publish \"polar\"\n.done"
        ],
        "pub": [
            {
                "address": 8,
                "type": "f",
                "numValues": 5,
                "name": "target",
                "description": "Lon/Lat of target"
            },
            {
                "address": 9,
                "type": "u8",
                "numValues": 1,
                "name": "mode",
                "description": "Mode - passthrough (default), active, reset"
            },
            {
                "address": 10,
                "type": "f",
                "numValues": 2,
                "name": "threshold",
                "description": "Min SOG for tack and acceptable deviation from target heading"
            },
            {
                "address": 11,
                "type": "u8",
                "numValues": 16,
                "name": "polar",
                "description": "Calculated polar plot"
            },
            {
                "address": 12,
                "type": "u8",
                "numValues": 16,
                "name": "samples",
                "description": "Number of samples per polar bin"
            }
        ],
        "sub": [
            "13;f;3;radius;Inner, mid and outer target radii",
            "14;f;2;adjHeading;Adjusted heading - either passthrough of <b>Heading</b> or generated heading depending on mode",
            {
                "address": 20,
                "addrAddress": 21,
                "type": "f",
                "numValues": 2,
                "name": "location",
                "description": "Current location from GPS"
            },
            {
                "address": 32,
                "addrAddress": 33,
                "type": "f",
                "numValues": 1,
                "name": "SOG",
                "description": "Speed over ground from GPS"
            },
            {
                "address": 34,
                "addrAddress": 35,
                "type": "f",
                "numValues": 1,
                "name": "wind",
                "description": "Wind angle"
            },
            "36;37;f;1;Wind speed",
            "38;39;f;1;Target heading from Sailor"
        ],
        "filename": [
            "../DroneNode/src/droneModules/PolarModule.h"
        ]
    },
    "RFM69Telemetry": {
        "type": [
            "RFM69Telemetry"
        ],
        "description": [
            "Manages DroneLink telemetry using an RFM69HW radio module"
        ],
        "config": [
            "RFM69Telemetry.new 3\n  name \"RFM69\"\n  status 1  // enable\n  .sub [@>0.0]  // subscribe to and transmit all traffic on this node\n  .publish \"RSSI\"\n.done"
        ],
        "pub": [
            {
                "address": 8,
                "type": "f",
                "numValues": 1,
                "name": "RSSI",
                "description": "RSSI of received packets"
            },
            {
                "address": 9,
                "type": "u32",
                "numValues": 3,
                "name": "packets",
                "description": "Packet counters for sent, received and rejected"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/RFM69TelemetryModule.h"
        ]
    },
    "Receiver": {
        "type": [
            "Receiver"
        ],
        "inherits": [
            "Drone"
        ],
        "description": [
            "Reads PWM values from an RC receiver"
        ],
        "config": [
            "Receiver.new 14\n  name \"Receiver\"\n  interval 200\n  pins IN0_0 IN0_1\n  limits 980 2020\n  //.publish \"pins\"\n  .publish \"value1\"\n  .publish \"value2\"\n  .publish \"output\"\n.done"
        ],
        "guide": [
            "<p>PWM values from an RC receiver are decoded using interrupt routines, then converted\nand published as values (<b>value1, value2</b>, etc) in range -1..1 on a regular <b>interval</b>.  Output values can be subscribed to from other modules (e.g. Servo or TankSteer). </p>\n\n<p>The valid range of PWM input values (i.e. pulse timings in ms) are defined by the <b>limits</b> parameter.</p>\n\n<p>Deadman protection is triggered after 5 seconds of no valid PWM signals and all output values are set to zero.</p>"
        ],
        "pub": [
            {
                "address": 10,
                "type": "u8",
                "numValues": 2,
                "name": "pins",
                "description": "Receiver input pins, one per receiver channel (see <a href=\"pins.html\">Pin Mappings</a>)"
            },
            {
                "address": 11,
                "type": "f",
                "numValues": 1,
                "name": "value1",
                "description": "The received value on channel 1 converted to range -1 .. 1"
            },
            {
                "address": 12,
                "type": "f",
                "numValues": 1,
                "name": "value2",
                "description": "The received value on channel 2 converted to range -1 .. 1"
            },
            {
                "address": 15,
                "type": "u32",
                "numValues": 2,
                "name": "limits",
                "description": "The PWM timing min and max limits (default 1000 .. 2000)"
            },
            {
                "address": 20,
                "type": "u32",
                "numValues": 2,
                "name": "output",
                "description": "Raw PWM timing values for each channel"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/ReceiverModule.h"
        ]
    },
    "Servo": {
        "type": [
            "Servo"
        ],
        "inherits": [
            "Drone"
        ],
        "description": [
            "Manages a PWM servo channel"
        ],
        "config": [
            "Servo.new 13\n  position 0\n  pins OUT0_1\n  status 1\n  name \"Rudder\"\n  map 30 70 110 150\n  centre 8\n  $position [@>11.16]\n  interval 100\n  .publish \"map\"\n  .publish \"centre\"\n  .publish \"position\"\n  .publish \"output\"\n.done"
        ],
        "sub": [
            "10;u8;1;pins;Servo output pin, see <a href=\"pins.html\">Pin Mappings</a>",
            "11;f;1;limits;Movement rate limit in degrees/second",
            "12;f;4;map;Bezier curve control points to map input (-1..1) to output (0..180)",
            "13;f;1;centre;Centre adjustment, applied after map",
            "14;f;1;output;The raw angle sent to the Servo PWM controller (0..180)",
            {
                "address": 8,
                "addrAddress": 9,
                "type": "f",
                "numValues": 1,
                "name": "position",
                "description": "The input position value (-1..1)"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/ServoModule.h"
        ]
    },
    "SpeedControl": {
        "type": [
            "SpeedControl"
        ],
        "description": [
            "Convert a distance value (meters) into a speed control value (0..1)"
        ],
        "guide": [
            "<li> Sub to distance (from Nav)\n   <li> Param for speed limits\n   <li> Param for distance threshold at which to start slowing down\n   <li> Generate speed output to feed TankSteer, etc"
        ],
        "filename": [
            "../DroneNode/src/droneModules/SpeedControlModule.h"
        ]
    },
    "Status": {
        "type": [
            "Status"
        ],
        "inherits": [
            "Drone"
        ],
        "description": [
            "Monitors up to four parameters and publishes a corresponding status scene to a Neopixel module"
        ],
        "pub": [
            {
                "address": 8,
                "type": "u8",
                "numValues": 16,
                "name": "scene",
                "description": "Status scene for a Neopixel module to subscribe to"
            },
            {
                "address": 10,
                "type": "f",
                "numValues": 1,
                "name": "value1",
                "description": "Threshold for sub1"
            },
            {
                "address": 11,
                "type": "f",
                "numValues": 1,
                "name": "value2",
                "description": "Threshold for sub2"
            },
            {
                "address": 12,
                "type": "f",
                "numValues": 1,
                "name": "value3",
                "description": "Threshold for sub3"
            },
            {
                "address": 13,
                "type": "f",
                "numValues": 1,
                "name": "value4",
                "description": "Threshold for sub4"
            }
        ],
        "sub": [
            {
                "address": 20,
                "addrAddress": 21,
                "type": "f",
                "numValues": 2,
                "name": "sub1",
                "description": "First parameter to monitor for status"
            },
            {
                "address": 22,
                "addrAddress": 23,
                "type": "f",
                "numValues": 2,
                "name": "sub2",
                "description": "First parameter to monitor for status"
            },
            {
                "address": 24,
                "addrAddress": 25,
                "type": "f",
                "numValues": 2,
                "name": "sub3",
                "description": "First parameter to monitor for status"
            },
            {
                "address": 26,
                "addrAddress": 27,
                "type": "f",
                "numValues": 2,
                "name": "sub4",
                "description": "First parameter to monitor for status"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/StatusModule.h"
        ]
    },
    "Timer": {
        "type": [
            "Timer"
        ],
        "description": [
            "Emits a configured message on a set interval (WIP)"
        ],
        "filename": [
            "../DroneNode/src/droneModules/TimerModule.h"
        ]
    }
}