{
    "Drone": {
        "type": [
            "Drone"
        ],
        "description": [
            "Base class for Drone modules"
        ],
        "publish": [
            "status",
            "name",
            "error",
            "resetCount",
            "type",
            "interval"
        ],
        "default": [
            {
                "param": "status",
                "values": [
                    "1"
                ]
            }
        ],
        "pub": [
            {
                "address": 1,
                "type": "u8",
                "numValues": 1,
                "writeable": true,
                "name": "status",
                "description": "0=disabled, 1=enabled, 2=waiting for valid subscriptions, write a value of 255 to trigger reset (TODO)"
            },
            {
                "address": 2,
                "type": "c",
                "numValues": 16,
                "writeable": true,
                "name": "name",
                "description": "Module name"
            },
            {
                "address": 3,
                "type": "u8",
                "numValues": 1,
                "writeable": false,
                "name": "error",
                "description": "Error flags: 1=error, 0=no error"
            },
            {
                "address": 4,
                "type": "u32",
                "numValues": 1,
                "writeable": false,
                "name": "resetCount",
                "description": "Module reset count, e.g. for I2C errors"
            },
            {
                "address": 5,
                "type": "c",
                "numValues": 16,
                "writeable": false,
                "name": "type",
                "description": "Module type name (class name)"
            },
            {
                "address": 6,
                "type": "u32",
                "numValues": 1,
                "writeable": true,
                "name": "interval",
                "description": "Number of milliseconds between updates"
            }
        ],
        "filename": [
            "../DroneNode/src/DroneModule.h"
        ]
    },
    "Analog": {
        "type": [
            "Analog"
        ],
        "inherits": [
            "Drone"
        ],
        "category": [
            "Input"
        ],
        "description": [
            "Manages a simple Analog sensor connected to an analog input pin"
        ],
        "guide": [
            "Reads an analog value on specified pin (range 0..4095) and maps into the range limits[min..max]"
        ],
        "config": [
            "[Analog = 5]\n  pins = 34\n  limits = 0, 10\n  publish = raw, analog"
        ],
        "pub": [
            {
                "address": 10,
                "type": "u8",
                "numValues": 1,
                "writeable": true,
                "name": "pins",
                "description": "Pin for the analog input"
            },
            {
                "address": 11,
                "type": "u32",
                "numValues": 1,
                "writeable": false,
                "name": "raw",
                "description": "Raw analog reading (0..4095)"
            },
            {
                "address": 12,
                "type": "f",
                "numValues": 2,
                "writeable": true,
                "name": "limits",
                "description": "Min and max values to map the raw reading into"
            },
            {
                "address": 13,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "analog",
                "description": "Analog value after mapping into min/max range"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/AnalogModule.h"
        ]
    },
    "Anemometer": {
        "type": [
            "Anemometer"
        ],
        "inherits": [
            "Drone"
        ],
        "category": [
            "Input"
        ],
        "description": [
            "Manages an Anemometer."
        ],
        "guide": [
            "- Anemometer speed from cup anemometor on an digital input with internal pullup\n- Uses internal 5sec moving average on samples\n- Conversion is 1.25 revs per m/s"
        ],
        "config": [
            "[Anemometer= 14]\n  name= \"Anemometer\"\n  interval= 100\n  pins = 32\n  publish = speed"
        ],
        "pub": [
            {
                "address": 11,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "speed",
                "description": "wind speed in Knots"
            },
            {
                "address": 12,
                "type": "u8",
                "numValues": 1,
                "writeable": true,
                "name": "pins",
                "description": "Pin to use for anemometer interrupt signal"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/AnemometerModule.h"
        ]
    },
    "Avoid": {
        "type": [
            "Avoid"
        ],
        "inherits": [
            "Drone"
        ],
        "category": [
            "Logic"
        ],
        "description": [
            "Sail polar calibration module"
        ],
        "guide": [
            ""
        ],
        "config": [
            "[ Avoid = 14 ]\n  name = Avoid\n  $location = @>50.9\n  $heading = @>50.8\n  $course = @>Nav.adjHeading\n  $SOG = @>50.12\n  publish = adjHeading, target, threshold, vessel, packets\n  publish = location, SOG, heading, course, ETC"
        ],
        "pub": [
            {
                "address": 8,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "adjHeading",
                "description": "Adjusted heading - either passthrough of <b>Heading</b> or generated to avoid obstacle"
            },
            {
                "address": 9,
                "type": "f",
                "numValues": 4,
                "writeable": false,
                "name": "target",
                "description": "Target Lon, Lat, COG and SOG"
            },
            {
                "address": 10,
                "type": "f",
                "numValues": 2,
                "writeable": true,
                "name": "threshold",
                "description": "Thresholds, 0=range beyond which vessels will be ignored, 1=radius within which to treat as a collision"
            },
            {
                "address": 11,
                "type": "u32",
                "numValues": 4,
                "writeable": false,
                "name": "vessel",
                "description": "Number of vessels, 0=total, 1=in range, 2=colliding, 3=mmsi of most urgent potential collision"
            },
            {
                "address": 12,
                "type": "u32",
                "numValues": 2,
                "writeable": false,
                "name": "packets",
                "description": "0=Number of NMEA packets recevied, 1=Number of successfully parsed AIS messages"
            },
            {
                "address": 13,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "ETC",
                "description": "estimated time to collision"
            }
        ],
        "sub": [
            {
                "address": 20,
                "addrAddress": 21,
                "type": "f",
                "numValues": 2,
                "name": "location",
                "description": "Current location from GPS"
            },
            {
                "address": 32,
                "addrAddress": 33,
                "type": "f",
                "numValues": 1,
                "name": "SOG",
                "description": "Speed over ground from GPS"
            },
            {
                "address": 38,
                "addrAddress": 39,
                "type": "f",
                "numValues": 1,
                "name": "heading",
                "description": "Current heading from Compass"
            },
            {
                "address": 34,
                "addrAddress": 35,
                "type": "f",
                "numValues": 1,
                "name": "course",
                "description": "Course from Nav"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/AvoidModule.h"
        ]
    },
    "BME280": {
        "type": [
            "BME280"
        ],
        "inherits": [
            "I2CBase"
        ],
        "category": [
            "Input"
        ],
        "description": [
            "Manages a BME280 I2c temp, humidty and pressure sensor"
        ],
        "config": [
            "[ BME280 = 14 ]\n  name = BME280\n  bus = 4\n  publish = temperature, humidity, pressure, altitude"
        ],
        "I2CAddress": [
            "0x76"
        ],
        "pub": [
            {
                "address": 10,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "temperature",
                "description": "Temperature in degrees C"
            },
            {
                "address": 11,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "humidity",
                "description": "Humidity"
            },
            {
                "address": 12,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "pressure",
                "description": "Pressure"
            },
            {
                "address": 13,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "altitude",
                "description": "Altitude in meters"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/BME280Module.h"
        ]
    },
    "CMPS12": {
        "type": [
            "CMPS12"
        ],
        "inherits": [
            "I2CBase"
        ],
        "category": [
            "Input"
        ],
        "description": [
            "Manages a CMPS12 I2C Compass"
        ],
        "config": [
            "[CMPS12= 8]\n  name= \"Compass\"\n  interval= 100\n  bus= 3\n  status= 1\n  trim= 0\n  location= -1.8, 52, 100\n  $location= @>7.8\n  publish = heading, trim"
        ],
        "I2CAddress": [
            "0x60"
        ],
        "pub": [
            {
                "address": 10,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "heading",
                "description": "Heading adjusted for magnetic declination"
            },
            {
                "address": 11,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "declination",
                "description": "Current declination value"
            },
            {
                "address": 12,
                "type": "f",
                "numValues": 1,
                "writeable": true,
                "name": "trim",
                "description": "Manual calibration value to adjust heading to match hull (e.g. for a misaligned physical mount)"
            },
            {
                "address": 13,
                "type": "f",
                "numValues": 2,
                "writeable": false,
                "name": "vector",
                "description": "Pitch and roll vector"
            }
        ],
        "sub": [
            {
                "address": 20,
                "addrAddress": 21,
                "type": "f",
                "numValues": 2,
                "name": "location",
                "description": "Current location from GPS"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/CMPS12Module.h"
        ]
    },
    "Cylon": {
        "type": [
            "Cylon"
        ],
        "inherits": [
            "Drone"
        ],
        "category": [
            "Output"
        ],
        "description": [
            "Manage a strip of NEOPixels (WS2812B) - originally created for the Kit speedboat"
        ],
        "pub": [
            {
                "address": 12,
                "type": "u8",
                "numValues": 1,
                "writeable": true,
                "name": "pins",
                "description": "Which output pin is connected to the pixel strip"
            },
            {
                "address": 13,
                "type": "u8",
                "numValues": 1,
                "writeable": true,
                "name": "numPixels",
                "description": "How many pixels in the strip"
            }
        ],
        "sub": [
            {
                "address": 8,
                "addrAddress": 9,
                "type": "f",
                "numValues": 1,
                "name": "left",
                "description": "Left motor speed"
            },
            {
                "address": 10,
                "addrAddress": 11,
                "type": "f",
                "numValues": 1,
                "name": "right",
                "description": "Right motor speed"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/CylonModule.h"
        ]
    },
    "Depth": {
        "type": [
            "Depth"
        ],
        "inherits": [
            "Drone"
        ],
        "category": [
            "Input"
        ],
        "description": [
            "Manages a simple Depth sensor (sonar transducer) controlled via Trigger and Echo pins"
        ],
        "guide": [
            "Notes:\nIn the oceans the speed of sound varies between 1,450 and 1,570 metres per second or 0.145 cm per microsecond.\nGiven the transducer requires the sound pulse to travel to the bottom and back the effective distance per microsend is actually halved or 0.0725 cm per microsecond."
        ],
        "config": [
            "// New Depth sensor bound to channel 30\nDepth.new 30\n  name \"Depth\"\n  status true         // enabled\n  interval 1000       // sample once per second\n  pins OUT0_0 OUT0_1  // tigger and echo pins\n  limits 0.25 10      // set sensor range to min=0.25m, max=10m\n  speed 1480          // speed of sound in fresh water = 1480m/s\n  $location [@>5.8]   // subscribe to GPS location\n  distance 5          // publish log entires every 5m\n\n  .publish \"depth\"    // publish the measured depth\n  .publish \"log\"      // publish a combined log entry containing GPS location and depth\n\n  // .publish \"speed\"\n  // .publish \"pins\"\n  // .publish \"limits\"\n  // .publish \"distance\"\n.done"
        ],
        "pub": [
            {
                "address": 10,
                "type": "u8",
                "numValues": 2,
                "writeable": true,
                "name": "pins",
                "description": "Pin connections for the depth module (Trigger, Echo)"
            },
            {
                "address": 11,
                "type": "f",
                "numValues": 1,
                "writeable": true,
                "name": "speed",
                "description": "Set the speed of sound in water (default 1480 for fresh water)"
            },
            {
                "address": 12,
                "type": "f",
                "numValues": 2,
                "writeable": true,
                "name": "limits",
                "description": "Min and max depth limits in meters (Default 0.25 10)"
            },
            {
                "address": 13,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "depth",
                "description": "Measured depth (or zero if unable to measure)"
            },
            {
                "address": 14,
                "type": "f",
                "numValues": 3,
                "writeable": false,
                "name": "log",
                "description": "Composite log entry combining current GPS location and depth reading into a single param"
            },
            {
                "address": 15,
                "type": "f",
                "numValues": 1,
                "writeable": true,
                "name": "distance",
                "description": "Minimum distance between log entires.  Will only publish a fresh log entry if more than distance from last sample location.  Default 0m."
            }
        ],
        "sub": [
            {
                "address": 20,
                "addrAddress": 21,
                "type": "f",
                "numValues": 2,
                "name": "location",
                "description": "Current location from GPS"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/DepthModule.h"
        ]
    },
    "Diagnostic": {
        "type": [
            "Diagnostic"
        ],
        "inherits": [
            "I2CBaseModule"
        ],
        "category": [
            "Output"
        ],
        "description": [
            "Manages a Diagnostic 128x64 I2C display (1306 driver)"
        ],
        "config": [
            "[Diagnostic = 6]\n  name= \"Diagnostic\"\n  interval= 200\n  bus= 0"
        ],
        "I2CAddress": [
            "0x3C"
        ],
        "filename": [
            "../DroneNode/src/droneModules/DiagnosticModule.h"
        ]
    },
    "HMC5883L": {
        "type": [
            "HMC5883L"
        ],
        "inherits": [
            "I2CCompass"
        ],
        "category": [
            "Input"
        ],
        "description": [
            "Manages a HMC5883L I2C Compass"
        ],
        "config": [
            "[HMC5883L= 8]\n  name= \"Compass\"\n  interval= 50\n  bus= 0\n  calibX= -6,0,6\n  calibY= -6,0,6\n  calibZ=-6,0,6\n  trim= 180\n  location= -1.8, 52, 100\n  mode=1\n  centre = -3.188, 4.167, -0.1043\n  $location = @>GPS.location\n  $roll = @>MPU6050.roll\n  $pitch = @>MPU6050.pitch\n  publish =heading, vector, calibX, calibY, calibZ\n  publish = trim, mode, roll, pitch, raw"
        ],
        "I2CAddress": [
            "0x1E"
        ],
        "filename": [
            "../DroneNode/src/droneModules/HMC5883LModule.h"
        ]
    },
    "HT16K33": {
        "type": [
            "HT16K33"
        ],
        "inherits": [
            "I2CBase"
        ],
        "category": [
            "Output"
        ],
        "description": [
            "Manages a HT16K33 7 segment display to show uptime"
        ],
        "config": [
            "[HT16K33= 8]\n  name= \"7Seg\"\n  bus= 3"
        ],
        "I2CAddress": [
            "0x70"
        ],
        "filename": [
            "../DroneNode/src/droneModules/HT16K33Module.h"
        ]
    },
    "I2CBase": {
        "type": [
            "I2CBase"
        ],
        "inherits": [
            "Drone"
        ],
        "description": [
            "Base class for I2C devices"
        ],
        "pub": [
            {
                "address": 8,
                "type": "u8",
                "numValues": 1,
                "writeable": true,
                "name": "bus",
                "description": "I2C Bus 0..7"
            },
            {
                "address": 9,
                "type": "u32",
                "numValues": 1,
                "writeable": true,
                "name": "addr",
                "description": "I2C address"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/I2CBaseModule.h"
        ]
    },
    "I2CCompass": {
        "type": [
            "I2CCompass"
        ],
        "inherits": [
            "I2CBase"
        ],
        "description": [
            "Manages a generic I2C Compass, to be implemented in a concrete class e.g. I2CCompass"
        ],
        "config": [
            "[I2CCompass = 6]\n  name=\"Compass\"\n  interval= 50\n  calibX= -6,0,6\n  calibY= -6,0,6\n  calibZ=-6,0,6\n  trim= 180\n  location= -1.8, 52, 100\n  mode=1\n  centre = -3.188, 4.167, -0.1043\n  $location = @>GPS.location\n  $roll = @>MPU6050.roll\n  $pitch = @>MPU6050.pitch\n  publish =heading, vector, calibX, calibY, calibZ\n  publish = trim, mode, roll, pitch, raw"
        ],
        "pub": [
            {
                "address": 10,
                "type": "f",
                "numValues": 4,
                "writeable": false,
                "name": "vector",
                "description": "Magnetic field vector after pitch/roll compensation"
            },
            {
                "address": 11,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "heading",
                "description": "Heading adjusted for magnetic declination"
            },
            {
                "address": 12,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "declination",
                "description": "Current declination value"
            },
            {
                "address": 13,
                "type": "f",
                "numValues": 3,
                "writeable": true,
                "name": "calibX",
                "description": "Min, center and max magnetic readings for the X axis"
            },
            {
                "address": 14,
                "type": "f",
                "numValues": 3,
                "writeable": true,
                "name": "calibY",
                "description": "Min, center and max magnetic readings for the Y axis"
            },
            {
                "address": 15,
                "type": "f",
                "numValues": 3,
                "writeable": true,
                "name": "calibZ",
                "description": "Min, center and max magnetic readings for the Z axis"
            },
            {
                "address": 18,
                "type": "f",
                "numValues": 1,
                "writeable": true,
                "name": "trim",
                "description": "Manual calibration value to adjust heading to match hull (e.g. for a misaligned physical mount)"
            },
            {
                "address": 20,
                "type": "u8",
                "numValues": 1,
                "writeable": true,
                "name": "mode",
                "description": "Mode: 0=online calibration, 1=fixed calibration, 2=reset calibration, 3=store calibration"
            },
            {
                "address": 21,
                "type": "f",
                "numValues": 4,
                "writeable": false,
                "name": "raw",
                "description": "Raw magnetic field vector"
            }
        ],
        "sub": [
            {
                "address": 16,
                "addrAddress": 17,
                "type": "f",
                "numValues": 3,
                "name": "location",
                "description": "Current location from GPS"
            },
            {
                "address": 22,
                "addrAddress": 23,
                "type": "f",
                "numValues": 1,
                "name": "pitch",
                "description": "Pitch from IMU (in degrees)"
            },
            {
                "address": 24,
                "addrAddress": 25,
                "type": "f",
                "numValues": 1,
                "name": "roll",
                "description": "Roll from IMU (in degrees)"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/I2CCompassModule.h"
        ]
    },
    "INA219": {
        "type": [
            "INA219"
        ],
        "inherits": [
            "I2CBase"
        ],
        "category": [
            "Input"
        ],
        "description": [
            "Manages an INA219 I2C power monitoring module"
        ],
        "config": [
            "[INA219= 4]\n  name= \"Power\"\n  bus= 1\n  addr= 64\n  interval= 1000\n  cells= 2\n  threshold= 6.4\n  status= 1\n  publish =current, power, loadV, alarm, shuntV, busV, cellV"
        ],
        "I2CAddress": [
            "0x40"
        ],
        "pub": [
            {
                "address": 10,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "shuntV",
                "description": "Voltage across shunt"
            },
            {
                "address": 11,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "busV",
                "description": "Bus voltage"
            },
            {
                "address": 12,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "current",
                "description": "Current (Amps)"
            },
            {
                "address": 13,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "power",
                "description": "Power (Watts)"
            },
            {
                "address": 14,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "loadV",
                "description": "Load voltage"
            },
            {
                "address": 15,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "cellV",
                "description": "Cell voltage (loadV / cells)"
            },
            {
                "address": 16,
                "type": "u8",
                "numValues": 1,
                "writeable": false,
                "name": "alarm",
                "description": "Set to 1 when alarm triggered, 0 otherwise"
            },
            {
                "address": 17,
                "type": "u8",
                "numValues": 1,
                "writeable": true,
                "name": "cells",
                "description": "Number of cells (e.g. for a liPo pack)"
            },
            {
                "address": 18,
                "type": "f",
                "numValues": 1,
                "writeable": true,
                "name": "threshold",
                "description": "Threshold voltage below which alarm is triggered (loadV < threshold)"
            },
            {
                "address": 19,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "usage",
                "description": "Cumulative usage in Amp hours"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/INA219Module.h"
        ]
    },
    "INA3221": {
        "type": [
            "INA3221"
        ],
        "inherits": [
            "I2CBase"
        ],
        "category": [
            "Input"
        ],
        "description": [
            "Manages a 3-channel INA3221 I2C power monitoring module"
        ],
        "config": [
            "[INA3221= 4]\n  name= \"Power\"\n  bus= 1\n  addr= 64\n  interval= 1000\n  cells= 2\n  threshold= 6.4\n  status= 1\n  publish =current, power, loadV, alarm, shuntV, busV, cellV"
        ],
        "I2CAddress": [
            "0x40"
        ],
        "pub": [
            {
                "address": 12,
                "type": "f",
                "numValues": 3,
                "writeable": false,
                "name": "current",
                "description": "Current (Amps) for each channel"
            },
            {
                "address": 13,
                "type": "f",
                "numValues": 3,
                "writeable": false,
                "name": "power",
                "description": "Power (Watts) for each channel"
            },
            {
                "address": 14,
                "type": "f",
                "numValues": 3,
                "writeable": false,
                "name": "loadV",
                "description": "Load voltage for each channel"
            },
            {
                "address": 15,
                "type": "f",
                "numValues": 3,
                "writeable": false,
                "name": "cellV",
                "description": "Cell voltage (loadV / cells) for each channel"
            },
            {
                "address": 16,
                "type": "u8",
                "numValues": 3,
                "writeable": false,
                "name": "alarm",
                "description": "Set to 1 when alarm triggered, 0 otherwise - one value per channel"
            },
            {
                "address": 17,
                "type": "u8",
                "numValues": 3,
                "writeable": true,
                "name": "cells",
                "description": "Number of cells (e.g. for a liPo pack) per channel"
            },
            {
                "address": 18,
                "type": "f",
                "numValues": 3,
                "writeable": true,
                "name": "threshold",
                "description": "Threshold voltage below which alarm is triggered (loadV < threshold) per channel"
            },
            {
                "address": 19,
                "type": "f",
                "numValues": 3,
                "writeable": true,
                "name": "shunt",
                "description": "Shunt resistor values for each channel in mOhm (default 100 mOhm)"
            },
            {
                "address": 20,
                "type": "f",
                "numValues": 3,
                "writeable": false,
                "name": "usage",
                "description": "Cumulative usage in Amp hours"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/INA3221Module.h"
        ]
    },
    "LSM9DS1": {
        "type": [
            "LSM9DS1"
        ],
        "inherits": [
            "I2CBaseModule"
        ],
        "category": [
            "Input"
        ],
        "description": [
            "Manages a LSM9DS1 I2C Compass"
        ],
        "config": [
            "[LSM9DS1 = 6]\n  name= \"Compass\"\n  interval= 200\n  bus= 0\n  status= 1\n  calibX= -3.5, 0, 2.3\n  calibY= -3.6, 0, 1.7\n  location= -1.8, 52, 100\n  $location = @>GPS.location\n  publish = heading, vector, calibX, calibY"
        ],
        "I2CAddress": [
            "0x1E",
            "0x6B"
        ],
        "pub": [
            {
                "address": 10,
                "type": "f",
                "numValues": 4,
                "writeable": false,
                "name": "vector",
                "description": "Raw magnetic field vector"
            },
            {
                "address": 11,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "heading",
                "description": "Heading adjusted for magnetic declination"
            },
            {
                "address": 12,
                "type": "f",
                "numValues": 1,
                "writeable": true,
                "name": "declination",
                "description": "Current declination value"
            },
            {
                "address": 13,
                "type": "f",
                "numValues": 3,
                "writeable": true,
                "name": "calibX",
                "description": "Min, center and max magnetic readings for the X axis"
            },
            {
                "address": 14,
                "type": "f",
                "numValues": 3,
                "writeable": true,
                "name": "calibY",
                "description": "Min, center and max magnetic readings for the Y axis"
            },
            {
                "address": 15,
                "type": "f",
                "numValues": 1,
                "writeable": true,
                "name": "trim",
                "description": "Manual calibration value to adjust heading to match hull (e.g. for a misaligned physical mount)"
            },
            {
                "address": 18,
                "type": "f",
                "numValues": 4,
                "writeable": true,
                "name": "limits",
                "description": "Averaged limits at the four quadrants, used to refine the calibration onoine"
            }
        ],
        "sub": [
            {
                "address": 16,
                "addrAddress": 17,
                "type": "f",
                "numValues": 2,
                "name": "location",
                "description": "Current location from GPS"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/LSM9DS1Module.h"
        ]
    },
    "MPU6050": {
        "type": [
            "MPU6050"
        ],
        "inherits": [
            "I2CBase"
        ],
        "category": [
            "Input"
        ],
        "description": [
            "Manages a MPU6050 I2c gyro/accel sensor"
        ],
        "config": [
            "[MPU6050 = 14 ]\n  name = \"MPU6050\"\n  bus = 4\n  interval = 50\n  publish = accel, pitch, roll\n  publish = raw, calibX, calibY, calibZ, mode"
        ],
        "I2CAddress": [
            "0x68"
        ],
        "pub": [
            {
                "address": 10,
                "type": "f",
                "numValues": 3,
                "writeable": false,
                "name": "accel",
                "description": "Acceleration vector in G"
            },
            {
                "address": 11,
                "type": "f",
                "numValues": 3,
                "writeable": false,
                "name": "gyro",
                "description": "Gyro acceleration vector"
            },
            {
                "address": 12,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "temperature",
                "description": "Temperature in degrees C"
            },
            {
                "address": 13,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "pitch",
                "description": "Pitch angle in degrees, negative values are pitch down"
            },
            {
                "address": 14,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "roll",
                "description": "Roll angle in degrees, negative values are roll right"
            },
            {
                "address": 15,
                "type": "f",
                "numValues": 4,
                "writeable": false,
                "name": "raw",
                "description": "Raw acceleration vector, 4th value is std dev of rolling window"
            },
            {
                "address": 16,
                "type": "f",
                "numValues": 3,
                "writeable": true,
                "name": "calibX",
                "description": "Min, center and max magnetic readings for the X axis"
            },
            {
                "address": 17,
                "type": "f",
                "numValues": 3,
                "writeable": true,
                "name": "calibY",
                "description": "Min, center and max magnetic readings for the Y axis"
            },
            {
                "address": 18,
                "type": "f",
                "numValues": 3,
                "writeable": true,
                "name": "calibZ",
                "description": "Min, center and max magnetic readings for the Z axis"
            },
            {
                "address": 19,
                "type": "u8",
                "numValues": 1,
                "writeable": true,
                "name": "mode",
                "description": "Mode: 0=online calibration, 1=fixed calibration, 2=reset calibration, 3=store calibration"
            },
            {
                "address": 20,
                "type": "f",
                "numValues": 3,
                "writeable": false,
                "name": "calibG",
                "description": "Gyro calibration values (bias to zero)"
            },
            {
                "address": 21,
                "type": "f",
                "numValues": 2,
                "writeable": true,
                "name": "trim",
                "description": "Pitch and roll trims [pitch, roll]"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/MPU6050Module.h"
        ]
    },
    "Management": {
        "type": [
            "Management"
        ],
        "inherits": [
            "Drone"
        ],
        "category": [
            "Core"
        ],
        "description": [
            "Overall system management"
        ],
        "config": [
            "[ Management = 1 ]\n  name = Management\n  interval = 1000\n  hostname = Dreamer\n  discovery = 1\n  publish = hostname, build, IP, uptime, save"
        ],
        "pub": [
            {
                "address": 8,
                "type": "c",
                "numValues": 1,
                "writeable": true,
                "name": "hostname",
                "description": "Hostname of the device"
            },
            {
                "address": 9,
                "type": "c",
                "numValues": 1,
                "writeable": false,
                "name": "build",
                "description": "Git commit hash at the time the firmware was built"
            },
            {
                "address": 10,
                "type": "u8",
                "numValues": 3,
                "writeable": true,
                "name": "reset",
                "description": "Set [0] 1 to trigger a reset, [1,2] are reset codes for codes 0 and 1"
            },
            {
                "address": 11,
                "type": "u32",
                "numValues": 1,
                "writeable": false,
                "name": "heap",
                "description": "Current size of heap (i.e. free memory)"
            },
            {
                "address": 12,
                "type": "u8",
                "numValues": 4,
                "writeable": false,
                "name": "IP",
                "description": "IP address"
            },
            {
                "address": 13,
                "type": "u32",
                "numValues": 1,
                "writeable": false,
                "name": "uptime",
                "description": "Uptime in seconds"
            },
            {
                "address": 14,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "publishRate",
                "description": "Rate of messages published per second"
            },
            {
                "address": 15,
                "type": "u32",
                "numValues": 1,
                "writeable": false,
                "name": "choked",
                "description": "Number of times a channel queue has choked (rejected a msg becuse full)"
            },
            {
                "address": 16,
                "type": "u8",
                "numValues": 1,
                "writeable": true,
                "name": "discovery",
                "description": "Enable/disable node discovery process.  Set to 1 to enable, or 0 to disable."
            },
            {
                "address": 17,
                "type": "u8",
                "numValues": 1,
                "writeable": true,
                "name": "save",
                "description": "Set to 1 to save the live config"
            },
            {
                "address": 18,
                "type": "u8",
                "numValues": 1,
                "writeable": true,
                "name": "wifi",
                "description": "Enable/disable wifi. Set to 1 to enable, or 0 to disable."
            },
            {
                "address": 19,
                "type": "u32",
                "numValues": 1,
                "writeable": true,
                "name": "sleep",
                "description": "How long to sleep in main loop - uses light sleep"
            },
            {
                "address": 20,
                "type": "u32",
                "numValues": 1,
                "writeable": true,
                "name": "CPU",
                "description": "CPU freq in MHz, valid values 240, 160, 80"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/ManagementModule.h"
        ]
    },
    "Motor": {
        "type": [
            "Motor"
        ],
        "inherits": [
            "Drone"
        ],
        "category": [
            "Output"
        ],
        "description": [
            "Manages a Motor via an H Bridge module using PWM"
        ],
        "config": [
            "[Motor = 11]\n  name = \"LeftMotor\"\n  interval = 50\n  pins = OUT0_0, OUT0_1, DAC0_0\n  PWMChannel= 15\n  limits= -0.7, 0.7\n  deadband= 0.3\n  $speed = @>10.8\n  publish = speed"
        ],
        "pub": [
            {
                "address": 10,
                "type": "u8",
                "numValues": 3,
                "writeable": true,
                "name": "pins",
                "description": "Pin connections - dependent on mode (e.g. A, B, EN for standard H-bridge)"
            },
            {
                "address": 11,
                "type": "u8",
                "numValues": 1,
                "writeable": true,
                "name": "PWMChannel",
                "description": "Which ESP32 PWM channel to use (default 15), mode 1 requires two channels and will use +1 as well"
            },
            {
                "address": 12,
                "type": "f",
                "numValues": 2,
                "writeable": true,
                "name": "limits",
                "description": "Min and max speed limits in range -1 to 1 (default -1 1)"
            },
            {
                "address": 13,
                "type": "f",
                "numValues": 1,
                "writeable": true,
                "name": "deadband",
                "description": "Input range within which to set the motor output to zero, interpreted abs(input).  Default 0.3"
            },
            {
                "address": 14,
                "type": "u8",
                "numValues": 1,
                "writeable": true,
                "name": "mode",
                "description": "Operational mode. 0: standard H-bridge with A, B, and PWM-EN. 1: BTS7960 with PWM F & R.  2: Cytron with PWM speed + Dir"
            },
            {
                "address": 15,
                "type": "u8",
                "numValues": 1,
                "writeable": true,
                "name": "invert",
                "description": "Invert output direction (0=normal, 1=inverted)"
            }
        ],
        "sub": [
            {
                "address": 8,
                "addrAddress": 9,
                "type": "f",
                "numValues": 1,
                "name": "speed",
                "description": "Desired Motor speed in range -1 to 1"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/MotorModule.h"
        ]
    },
    "NMEA": {
        "type": [
            "NMEA"
        ],
        "inherits": [
            "Drone"
        ],
        "category": [
            "Input"
        ],
        "description": [
            "Manages a serial NMEA GPS device"
        ],
        "config": [
            "[NMEA= 7]\n  name= \"GPS\"\n  interval= 500\n  port= 2\n  baud= 9600\n  publish =location, satellites, HDOP, followMe"
        ],
        "pub": [
            {
                "address": 8,
                "type": "f",
                "numValues": 3,
                "writeable": false,
                "name": "location",
                "description": "Current GPS location (inc altitude)"
            },
            {
                "address": 9,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "satellites",
                "description": "Number of satellites used for fix"
            },
            {
                "address": 10,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "heading",
                "description": "Current heading over ground (inferred by motion or from dual GPS setup)"
            },
            {
                "address": 11,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "speed",
                "description": "Current speed over ground"
            },
            {
                "address": 12,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "HDOP",
                "description": "Current Horizontal Dilution of Precision"
            },
            {
                "address": 13,
                "type": "u8",
                "numValues": 2,
                "writeable": true,
                "name": "port",
                "description": "Which serial port to use (0,1 or 2) and optional second port for a dual GPS setup (default 255 for no port)"
            },
            {
                "address": 14,
                "type": "u32",
                "numValues": 1,
                "writeable": true,
                "name": "baud",
                "description": "Baud rate to use, normally 9600"
            },
            {
                "address": 15,
                "type": "f",
                "numValues": 3,
                "writeable": true,
                "name": "fix",
                "description": "Fix location - to use as basis for differential GPS signal"
            },
            {
                "address": 16,
                "type": "f",
                "numValues": 3,
                "writeable": false,
                "name": "followMe",
                "description": "Location field with a small target radius"
            },
            {
                "address": 17,
                "type": "u32",
                "numValues": 3,
                "writeable": false,
                "name": "packets",
                "description": "Number of NMEA packets (sentences) received (valid, invalid, unknown)"
            },
            {
                "address": 18,
                "type": "f",
                "numValues": 3,
                "writeable": false,
                "name": "location2",
                "description": "Current GPS location of secondary GPS module (inc altitude)"
            }
        ],
        "sub": [
            {
                "address": 20,
                "addrAddress": 21,
                "type": "f",
                "numValues": 3,
                "name": "correction",
                "description": "If fix location is set then this is the difference between live GPS and known location, for other nodes to subscribe to.  If no fix location, then this can be subbed to a base station correction param."
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/NMEAModule.h"
        ]
    },
    "Nav": {
        "type": [
            "Nav"
        ],
        "inherits": [
            "Drone"
        ],
        "category": [
            "Logic"
        ],
        "description": [
            "Navigation between waypoints accounting for crosswind drift"
        ],
        "guide": [
            "Target waypoints are defined in terms of Lon Lat and target Radius in meters."
        ],
        "config": [
            "[Nav= 9]\n  name= \"Nav\"\n  interval= 50\n  crosswind = 0.2\n  correction = 20\n  $location= @>7.8\n  target= -1.82, 51.56, 100\n  publish = target, location, heading, distance, mode, last, home, crosstrack"
        ],
        "sub": [
            {
                "address": 10,
                "addrAddress": 11,
                "type": "f",
                "numValues": 3,
                "name": "location",
                "description": "Current location from GPS.location"
            },
            {
                "address": 12,
                "addrAddress": 13,
                "type": "f",
                "numValues": 3,
                "name": "target",
                "description": "Target location, typically from Waypoint.target"
            },
            {
                "address": 21,
                "addrAddress": 22,
                "type": "f",
                "numValues": 1,
                "name": "wind",
                "description": "Current wind direction to allow for crosswind compensation"
            },
            {
                "address": 25,
                "addrAddress": 26,
                "type": "f",
                "numValues": 1,
                "name": "satellites",
                "description": "Number of satellites for GPS lock (e.g. @>GPS.satellites)"
            }
        ],
        "pub": [
            {
                "address": 8,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "heading",
                "description": "Target heading to reach target, feed to Sailor.target or TurnRate.target"
            },
            {
                "address": 9,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "distance",
                "description": "Distance to target in meters"
            },
            {
                "address": 14,
                "type": "u8",
                "numValues": 1,
                "writeable": true,
                "name": "mode",
                "description": "0=idle, 1=goto, 2=follow, 3=absolute course, 4=relative course, 5=backaway, 6=orbit"
            },
            {
                "address": 15,
                "type": "f",
                "numValues": 3,
                "writeable": false,
                "name": "last",
                "description": "Location when we last received a new target, used to plan track"
            },
            {
                "address": 16,
                "type": "f",
                "numValues": 3,
                "writeable": false,
                "name": "home",
                "description": "First valid location received since boot, used as home location"
            },
            {
                "address": 17,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "crosstrack",
                "description": "crosstrack ratio indicating distance from ideal track"
            },
            {
                "address": 18,
                "type": "f",
                "numValues": 1,
                "writeable": true,
                "name": "correction",
                "description": "How much to adjust heading to stay on ideal track"
            },
            {
                "address": 19,
                "type": "f",
                "numValues": 1,
                "writeable": true,
                "name": "crosswind",
                "description": "How much crosswind effect to account for - larger values cause heading to turn into the wind"
            },
            {
                "address": 20,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "adjHeading",
                "description": "Heading adjusted for crosswind, feed to Sailor.target or TurnRate.target"
            },
            {
                "address": 23,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "pitch",
                "description": "Pitch to target - assuming elevation in both location and target"
            },
            {
                "address": 24,
                "type": "f",
                "numValues": 2,
                "writeable": true,
                "name": "limits",
                "description": "Pitch limits (min, max)"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/NavModule.h"
        ]
    },
    "NetworkInterface": {
        "type": [
            "NetworkInterface"
        ],
        "description": [
            "Base class for network interfaces"
        ],
        "filename": [
            "../DroneNode/src/droneModules/NetworkInterfaceModule.h"
        ]
    },
    "ODrive": {
        "type": [
            "ODrive"
        ],
        "inherits": [
            "Drone"
        ],
        "category": [
            "Output"
        ],
        "description": [
            "Manages an ODrive module via serial"
        ],
        "config": [
            "ODrive.new 11\n  name \"ODrive\"\n  interval 100\n  port 2\n  limits -10 10\n  invert 0\n  $left [@>10.8]\n  $right [@>10.9]\n\n  // publish\n  .publish \"left\"\n  .publish \"right\"\n.done"
        ],
        "pub": [
            {
                "address": 12,
                "type": "f",
                "numValues": 2,
                "writeable": true,
                "name": "limits",
                "description": "Min and max speed limits in range -1 to 1 (default -1 1)"
            },
            {
                "address": 13,
                "type": "u8",
                "numValues": 1,
                "writeable": true,
                "name": "port",
                "description": "Serial port (0..2, default: 2)"
            },
            {
                "address": 14,
                "type": "u8",
                "numValues": 2,
                "writeable": true,
                "name": "invert",
                "description": "Invert axes (0 = normal, 1 = invert)"
            },
            {
                "address": 15,
                "type": "u8",
                "numValues": 1,
                "writeable": true,
                "name": "switch",
                "description": "Switch axes (0=normal, 1=switched i.e. switch left and right motors)"
            }
        ],
        "sub": [
            {
                "address": 8,
                "addrAddress": 9,
                "type": "f",
                "numValues": 1,
                "name": "left",
                "description": "Desired left motor speed in range -1 to 1"
            },
            {
                "address": 10,
                "addrAddress": 11,
                "type": "f",
                "numValues": 1,
                "name": "right",
                "description": "Desired right motor speed in range -1 to 1"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/ODriveModule.h"
        ]
    },
    "PanSerial": {
        "type": [
            "PanSerial"
        ],
        "description": [
            "Generate serial commands for a slave pan controller module"
        ],
        "guide": [
            ""
        ],
        "config": [
            "PanSerial.new 21\n  name \"PanSerial\"\n  PID (f) 0.005 0.0 0.0001\n  interval 50\n  $target [@>20.8]\n  $heading [@>6.11]\n  .publish \"target\"\n  .publish \"heading\"\n  .publish \"PID\"\n  .publish \"pan\"\n.done"
        ],
        "sub": [
            {
                "address": 10,
                "addrAddress": 11,
                "type": "f",
                "numValues": 1,
                "name": "target",
                "description": "Target heading (e.g. from Nav module)"
            },
            "12;13;f;1;Current heading (e.g. from Compass)"
        ],
        "pub": [
            {
                "address": 14,
                "type": "f",
                "numValues": 3,
                "writeable": true,
                "name": "PID",
                "description": "PID values (start with: 0.005 0.0 0.0001)"
            },
            {
                "address": 15,
                "type": "u8",
                "numValues": 1,
                "writeable": false,
                "name": "pan",
                "description": "Pan output in range 0..255 as sent over serial"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/PanSerialModule.h"
        ]
    },
    "PanTilt": {
        "type": [
            "PanTilt"
        ],
        "inherit": [
            "Drone"
        ],
        "category": [
            "Output"
        ],
        "description": [
            "Generate servo commands for a pan/tilt head to track a target (e.g. for camera or antenna trackers)"
        ],
        "guide": [
            ""
        ],
        "config": [
            "PanTilt.new 21\n  name \"PanTilt\"\n  PID (f) 0.005 0.0 0.0001\n  interval 50\n  $target [@>20.8]\n  $heading [@>6.11]\n  .publish \"target\"\n  .publish \"heading\"\n  .publish \"PID\"\n  .publish \"pan\"\n.done"
        ],
        "sub": [
            {
                "address": 10,
                "addrAddress": 11,
                "type": "f",
                "numValues": 1,
                "name": "target",
                "description": "Target heading (e.g. from Nav module)"
            },
            "12;13;f;1;Current heading (e.g. from Compass)"
        ],
        "pub": [
            {
                "address": 14,
                "type": "f",
                "numValues": 3,
                "writeable": true,
                "name": "PID",
                "description": "PID values (start with: 0.005 0.0 0.0001)"
            },
            {
                "address": 15,
                "type": "f",
                "numValues": 2,
                "writeable": true,
                "name": "limits",
                "description": "Limits of servo travel in degrees (default -90 90)"
            },
            {
                "address": 16,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "pan",
                "description": "Pan output in range -1..1, to be fed to servo"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/PanTiltModule.h"
        ]
    },
    "Polar": {
        "type": [
            "Polar"
        ],
        "inherits": [
            "Drone"
        ],
        "category": [
            "Logic"
        ],
        "description": [
            "Sail polar calibration module"
        ],
        "guide": [
            "<p>Sail on a variety of headings relative to the wind, measuring speed over ground\nrelative to wind speed and aggregating results to build a polar plot of saiiing performance vs heading.</p>\n\n<p>When in passthrough mode, will simply pass the Sailor heading onto its output (module chaining).  When active, will bypass the Sailor module and generate target headings.</p>\n\n<p>In either mode, the Sailor module is left to generate the sheet command based on\nrelative wind direction.  This may need a separate calibration process.</p>\n\n\n<p>Algorithm:</p>\n<ul>\n <li>if outside the inner threshold - turn onto a heading that will orbit the target in a clockwise direction (configurable?) at distance of mid threshold, once speed over ground is over threshold, then select a new heading that goes from current location through the center of the target.\n <li>when crossing the inner threshold heading inward - record the start location and time.\n <li>when crossing the inner threshold heading outward - calculate effective heading and if close enough to target heading, then record the end location and time, compute the average speed and add to polar info.\n\n <li>if pass the outer threshold heading out, abort and switch to passthrough mode to allow\n nav/sailor modules to take over\n <li>if pass the outer threshold heading inward, switch to active mode\n</ul>"
        ],
        "config": [
            "[Polar=13]\n  name=\"Polar\"\n  interval=1000\n  $location=@>50.9\n  $wind=@>50.10\n  windSpeed =1\n  $heading=@>Sailor.course\n  target =-1.7454870, 51.5418469\n  threshold =-1, 100\n  radius =10, 20, 50\n  mode= 1\n  publish =l ocation, SOG, wind, windSpeed, heading, polar\n  publish = adjHeading, mode, target, threshold, radius, samples"
        ],
        "pub": [
            {
                "address": 8,
                "type": "f",
                "numValues": 5,
                "writeable": false,
                "name": "target",
                "description": "Lon/Lat of target"
            },
            {
                "address": 9,
                "type": "u8",
                "numValues": 1,
                "writeable": true,
                "name": "mode",
                "description": "Mode - passthrough (default), active, reset"
            },
            {
                "address": 10,
                "type": "f",
                "numValues": 2,
                "writeable": true,
                "name": "threshold",
                "description": "Min SOG for tack and acceptable deviation from target heading"
            },
            {
                "address": 11,
                "type": "u8",
                "numValues": 16,
                "writeable": false,
                "name": "polar",
                "description": "Calculated polar plot"
            },
            {
                "address": 12,
                "type": "u8",
                "numValues": 16,
                "writeable": false,
                "name": "samples",
                "description": "Number of samples per polar bin"
            },
            {
                "address": 13,
                "type": "f",
                "numValues": 3,
                "writeable": true,
                "name": "radius",
                "description": "Inner, mid and outer target radii"
            },
            {
                "address": 14,
                "type": "f",
                "numValues": 2,
                "writeable": false,
                "name": "adjHeading",
                "description": "Adjusted heading - either passthrough of <b>Heading</b> or generated heading depending on mode"
            }
        ],
        "sub": [
            {
                "address": 20,
                "addrAddress": 21,
                "type": "f",
                "numValues": 2,
                "name": "location",
                "description": "Current location from GPS"
            },
            {
                "address": 32,
                "addrAddress": 33,
                "type": "f",
                "numValues": 1,
                "name": "SOG",
                "description": "Speed over ground from GPS"
            },
            {
                "address": 34,
                "addrAddress": 35,
                "type": "f",
                "numValues": 1,
                "name": "wind",
                "description": "Wind angle"
            },
            {
                "address": 36,
                "addrAddress": 37,
                "type": "f",
                "numValues": 1,
                "name": "windSpeed",
                "description": "Wind speed"
            },
            {
                "address": 38,
                "addrAddress": 39,
                "type": "f",
                "numValues": 1,
                "name": "heading",
                "description": "Target heading from Sailor"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/PolarModule.h"
        ]
    },
    "QMC5883L": {
        "type": [
            "QMC5883L"
        ],
        "inherits": [
            "I2CCompass"
        ],
        "category": [
            "Input"
        ],
        "description": [
            "Manages a QMC5883L I2C Compass"
        ],
        "config": [
            "[QMC5883L= 5]\n  name= \"Compass\"\n  interval= 50\n  bus= 0\n  calibX= -6,0,6\n  calibY= -6,0,6\n  calibZ=-6,0,6\n  trim= 180\n  location= -1.8, 52, 100\n  mode=1\n  centre = -3.188, 4.167, -0.1043\n  $location = @>GPS.location\n  $roll = @>MPU6050.roll\n  $pitch = @>MPU6050.pitch\n  publish =heading, vector, calibX, calibY, calibZ\n  publish = trim, mode, roll, pitch, raw"
        ],
        "I2CAddress": [
            "0x0D"
        ],
        "filename": [
            "../DroneNode/src/droneModules/QMC5883LModule.h"
        ]
    },
    "RFM69Telemetry": {
        "type": [
            "RFM69Telemetry"
        ],
        "inherits": [
            "Drone"
        ],
        "category": [
            "Networking"
        ],
        "description": [
            "Manages DroneLink telemetry using an RFM69HW radio module"
        ],
        "config": [
            "[RFM69Telemetry=3]\n  name= RFM69\n  publish= RSSI,packets,speed,power"
        ],
        "pub": [
            {
                "address": 8,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "RSSI",
                "description": "RSSI of received packets"
            },
            {
                "address": 9,
                "type": "u32",
                "numValues": 3,
                "writeable": false,
                "name": "packets",
                "description": "Packet counters for sent, received and rejected"
            },
            {
                "address": 10,
                "type": "f",
                "numValues": 3,
                "writeable": false,
                "name": "speed",
                "description": "Packet rates per second for sent, received and rejected"
            },
            {
                "address": 11,
                "type": "f",
                "numValues": 1,
                "writeable": true,
                "name": "power",
                "description": "Radio transmit power (-14..20), default 20"
            },
            {
                "address": 12,
                "type": "u32",
                "numValues": 1,
                "writeable": true,
                "name": "frequency",
                "description": "Operating frequency, default 915 Mhz"
            },
            {
                "address": 13,
                "type": "u8",
                "numValues": 1,
                "writeable": true,
                "name": "threshold",
                "description": "Priority threshold, only packets with this or higher priority will be transmitted (default: 0, i.e. all priorities are transmitted)"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/RFM69TelemetryModule.h"
        ]
    },
    "Receiver": {
        "type": [
            "Receiver"
        ],
        "inherits": [
            "Drone"
        ],
        "category": [
            "Input"
        ],
        "description": [
            "Reads up to 4 PWM channels from an RC receiver"
        ],
        "config": [
            "Receiver.new 14\n  name \"Receiver\"\n  interval 200\n  pins 34\n  limits 980 2020\n  mode 1 // PPM\n  $switch [@>14.13]\n  $input1 [@>9.14]\n  $input2 [@>8.16]\n  //.publish \"pins\"\n  .publish \"value1\"\n  .publish \"value2\"\n  .publish \"value3\"\n  .publish \"input\"\n  .publish \"limits\"\n  .publish \"input1\"\n  .publish \"input2\"\n  .publish \"switch\"\n.done"
        ],
        "guide": [
            "<p>PWM values from an RC receiver are decoded using interrupt routines, then converted\nand published as values (<b>value1, value2</b>, etc) in range -1..1 on a regular <b>interval</b>.  Output values can be subscribed to from other modules (e.g. Servo or TankSteer).  Up to 4 channels can be read.</p>\n\n<p>The valid range of PWM input values (i.e. pulse timings in ms) are defined by the <b>limits</b> parameter.</p>\n\n<p>Deadman protection is triggered after 5 seconds of no valid PWM signals and all output values are set to zero.</p>\n\n<p>The module can optionally be chained behind other modules (e.g. for automated navigation) with a virtual switch to flip outputs between channel subscriptions (passthrough mode) vs RC receiver inputs.  The <b>switch</b> parameter controls which mode the module is in - if switch is less than 0.5 then it is in passthrough (subscription values are output), otherwise in active mode (i.e. RC receiver values are output). </p>"
        ],
        "pub": [
            {
                "address": 10,
                "type": "u8",
                "numValues": 2,
                "writeable": true,
                "name": "pins",
                "description": "Receiver input pins, one per receiver channel (see <a href=\"pins.html\">Pin Mappings</a>) or a single pin for PPM"
            },
            {
                "address": 11,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "value1",
                "description": "The output value on channel 1 (in range -1 .. 1)"
            },
            {
                "address": 12,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "value2",
                "description": "The output value on channel 2 (in range -1 .. 1)"
            },
            {
                "address": 13,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "value3",
                "description": "The output value on channel 3 (in range -1 .. 1)"
            },
            {
                "address": 14,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "value4",
                "description": "The output value on channel 4 (in range -1 .. 1)"
            },
            {
                "address": 15,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "value5",
                "description": "The output value on channel 5 (in range -1 .. 1)"
            },
            {
                "address": 16,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "value6",
                "description": "The output value on channel 6 (in range -1 .. 1)"
            },
            {
                "address": 19,
                "type": "u32",
                "numValues": 2,
                "writeable": true,
                "name": "limits",
                "description": "The PWM timing min and max limits (default 1000 .. 2000)"
            },
            {
                "address": 20,
                "type": "u8",
                "numValues": 6,
                "writeable": false,
                "name": "input",
                "description": "Raw PWM timing input values for each channel divided by 10 (e.g. 2000us = 200)"
            },
            {
                "address": 31,
                "type": "u8",
                "numValues": 1,
                "writeable": true,
                "name": "mode",
                "description": "0=PWM, 1=PPM on first defined pin (Default PPM)"
            }
        ],
        "sub": [
            {
                "address": 21,
                "addrAddress": 25,
                "type": "f",
                "numValues": 1,
                "name": "input1",
                "description": "Subscription for channel 1 (used in passthrough mode)"
            },
            {
                "address": 22,
                "addrAddress": 26,
                "type": "f",
                "numValues": 1,
                "name": "input2",
                "description": "Subscription for channel 2 (used in passthrough mode)"
            },
            {
                "address": 23,
                "addrAddress": 27,
                "type": "f",
                "numValues": 1,
                "name": "input3",
                "description": "Subscription for channel 3 (used in passthrough mode)"
            },
            {
                "address": 24,
                "addrAddress": 28,
                "type": "f",
                "numValues": 1,
                "name": "input4",
                "description": "Subscription for channel 4 (used in passthrough mode)"
            },
            {
                "address": 29,
                "addrAddress": 30,
                "type": "f",
                "numValues": 1,
                "name": "switch",
                "description": "Mode control value - passthrough if less than 0.5, otherwise active (defaults to active)"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/ReceiverModule.h"
        ]
    },
    "Sailor": {
        "type": [
            "Sailor"
        ],
        "inherits": [
            "Drone"
        ],
        "category": [
            "Logic"
        ],
        "description": [
            "Control a typical sailing boat"
        ],
        "guide": [
            "Sailor controller\n\nsubs\n* target heading (from nav module)\n* wind direction (from wind sensor)\n* cross-track factor (from nav module)\n* ocean current vector - TODO\n\npubs\n* heading (course to sail) - fed to rudder\n* sheet extension (from 0 - close haul to 1 - run) - fed to sheet actuator\n\nconfig (pubs)\n* polar - sailing performance for different headings relative to wind\n   - modelled as 16 segments in the clockwise 180 degree region (assumes mirrored performance)\n   - each segment is 180/16 degree = 11.25 degree arc, centre of segment should be considered the target heading to achieve associated performance\n   - performance stored as a single uint8_t value = 0..255"
        ],
        "config": [
            "[Sailor=12]\n  name=\"Sailor\"\n  interval=1000\n  polar=0, 0, 0, 200,   255, 255, 255, 250,  240, 230, 220, 210,  200, 180, 160, 140\n  crosswind=0.5\n  $wind=@>50.10\n  $target=@>Nav.heading\n  $heading=@>50.8\n  $crosstrack=@>Nav.crosstrack\n  publish=target, heading, wind, crosstrack, course, sheet, polar"
        ],
        "sub": [
            {
                "address": 8,
                "addrAddress": 9,
                "type": "f",
                "numValues": 1,
                "name": "target",
                "description": "Target bearing, typically Nav.heading"
            },
            {
                "address": 10,
                "addrAddress": 11,
                "type": "f",
                "numValues": 1,
                "name": "heading",
                "description": "Current heading, typically Compass.heading"
            },
            {
                "address": 12,
                "addrAddress": 13,
                "type": "f",
                "numValues": 1,
                "name": "wind",
                "description": "Current wind direction, typically Wind.wind"
            },
            {
                "address": 14,
                "addrAddress": 15,
                "type": "f",
                "numValues": 1,
                "name": "crosstrack",
                "description": "Current crosstrack from Nav.crosstrack"
            }
        ],
        "pub": [
            {
                "address": 16,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "course",
                "description": "Selected course/bearing - feed to Turnrate"
            },
            {
                "address": 17,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "sheet",
                "description": "Sheet servo control value in range -1 (close haul) to 1 (run)"
            },
            {
                "address": 18,
                "type": "u8",
                "numValues": 16,
                "writeable": true,
                "name": "polar",
                "description": "Polar map for starboard wind (0-180 degrees), mirrored for port.  0=stall, 255=max relative speed"
            },
            {
                "address": 19,
                "type": "u8",
                "numValues": 16,
                "writeable": false,
                "name": "speed",
                "description": "polar plot of estimated speeds by heading - 0-180"
            },
            {
                "address": 20,
                "type": "u8",
                "numValues": 16,
                "writeable": false,
                "name": "speed2",
                "description": "polar plot of estimated speeds by heading - 180-360"
            },
            {
                "address": 21,
                "type": "u8",
                "numValues": 5,
                "writeable": false,
                "name": "flags",
                "description": "[0] = state, [1] = tack state,  [2] = gybe state, [3] = course wind packed into 0..255"
            },
            {
                "address": 22,
                "type": "u8",
                "numValues": 1,
                "writeable": false,
                "name": "wing",
                "description": "Wingsail flap position.. 1 = starboard wind, -1 = port wind"
            },
            {
                "address": 23,
                "type": "f",
                "numValues": 3,
                "writeable": true,
                "name": "PID",
                "description": "PID values for rudder control (start with: 0.005 0.0 0.0)"
            },
            {
                "address": 24,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "rudder",
                "description": "Rudder output to feed a servo (-1..1)"
            },
            {
                "address": 25,
                "type": "f",
                "numValues": 1,
                "writeable": true,
                "name": "threshold",
                "description": "Error threshold to trigger the gybe timer (default 20 degrees)"
            },
            {
                "address": 26,
                "type": "f",
                "numValues": 1,
                "writeable": true,
                "name": "timeout",
                "description": "Timeout duration in seconds after which to initiate the gybe (default 10s)"
            },
            {
                "address": 27,
                "type": "u8",
                "numValues": 1,
                "writeable": true,
                "name": "mode",
                "description": "Mode (0=normal, 1=gybe only)"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/SailorModule.h"
        ]
    },
    "SerialTelemetry": {
        "type": [
            "SerialTelemetry"
        ],
        "inherit": [
            "NetworkInterface"
        ],
        "category": [
            "Networking"
        ],
        "description": [
            "Manages DroneLink telemetry over a serial port, optionally via a transparent telemetry module"
        ],
        "config": [
            "SerialTelemetry.new 3\n  name \"serial\"\n  status 1  // enable\n.done"
        ],
        "pub": [
            {
                "address": 8,
                "type": "u8",
                "numValues": 1,
                "writeable": true,
                "name": "port",
                "description": "Serial port (0-2, default: 1)"
            },
            {
                "address": 9,
                "type": "u32",
                "numValues": 3,
                "writeable": false,
                "name": "packets",
                "description": "Packet counters for sent, received and rejected"
            },
            {
                "address": 10,
                "type": "f",
                "numValues": 3,
                "writeable": false,
                "name": "speed",
                "description": "Packet rates per second for sent, received and rejected"
            },
            {
                "address": 11,
                "type": "u32",
                "numValues": 1,
                "writeable": true,
                "name": "baud",
                "description": "Baud rate (default: 115200)"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/SerialTelemetryModule.h"
        ]
    },
    "Servo": {
        "type": [
            "Servo"
        ],
        "default": [
            {
                "param": "pins",
                "values": [
                    "0"
                ]
            },
            {
                "param": "limits",
                "values": [
                    "90"
                ]
            },
            {
                "param": "map",
                "values": [
                    "0",
                    "60",
                    "110",
                    "180"
                ]
            },
            {
                "param": "centre",
                "values": [
                    "0"
                ]
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/ServoModule.h"
        ],
        "inherits": [
            "Drone"
        ],
        "category": [
            "Output"
        ],
        "description": [
            "Manages a PWM servo channel"
        ],
        "config": [
            "[Servo= 13]\n  position= 0\n  pins= 4\n  status= 1\n  name= \"Rudder\"\n  map= 50, 80, 100, 130\n  centre= 8\n  $position= @>11.16 \n  interval= 100\n  publish= map, centre, position, output"
        ],
        "ui": [
            "pins;pins;output"
        ],
        "pub": [
            {
                "address": 10,
                "type": "u8",
                "numValues": 1,
                "writeable": true,
                "name": "pins",
                "description": "Servo output pin, see <a href=\"pins.html\">Pin Mappings</a>"
            },
            {
                "address": 11,
                "type": "f",
                "numValues": 1,
                "writeable": true,
                "name": "limits",
                "description": "Movement rate limit in degrees/second (default: 90)"
            },
            {
                "address": 12,
                "type": "f",
                "numValues": 4,
                "writeable": true,
                "name": "map",
                "description": "Bezier curve control points to map input (-1..1) to output (0..180)"
            },
            {
                "address": 13,
                "type": "f",
                "numValues": 1,
                "writeable": true,
                "name": "centre",
                "description": "Centre adjustment, applied after map"
            },
            {
                "address": 14,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "output",
                "description": "The raw angle sent to the Servo PWM controller (0..180)"
            }
        ],
        "sub": [
            {
                "address": 8,
                "addrAddress": 9,
                "type": "f",
                "numValues": 1,
                "name": "position",
                "description": "The input position value (-1..1)"
            }
        ]
    },
    "SpeedControl": {
        "type": [
            "SpeedControl"
        ],
        "inherits": [
            "Drone"
        ],
        "category": [
            "Logic"
        ],
        "description": [
            "Convert a distance value (meters) into a speed control value (0..1)"
        ],
        "guide": [
            "<li> Sub to distance (from Nav)\n   <li> Param for speed limits\n   <li> Param for distance threshold at which to start slowing down\n   <li> Generate speed output to feed TankSteer, etc"
        ],
        "sub": [
            {
                "address": 10,
                "addrAddress": 11,
                "type": "f",
                "numValues": 1,
                "name": "distance",
                "description": "Distance to target, typically Nav.distance"
            }
        ],
        "pub": [
            {
                "address": 12,
                "type": "f",
                "numValues": 2,
                "writeable": true,
                "name": "limits",
                "description": "Min and max output speed range"
            },
            {
                "address": 13,
                "type": "f",
                "numValues": 1,
                "writeable": true,
                "name": "threshold",
                "description": "Distance in meters within which to throttle down to min limit"
            },
            {
                "address": 14,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "speed",
                "description": "Output speed"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/SpeedControlModule.h"
        ]
    },
    "Status": {
        "type": [
            "Status"
        ],
        "inherits": [
            "Drone"
        ],
        "category": [
            "Output"
        ],
        "description": [
            "Monitors up to four parameters and publishes a corresponding status scene to a Neopixel module"
        ],
        "pub": [
            {
                "address": 8,
                "type": "u8",
                "numValues": 16,
                "writeable": true,
                "name": "scene",
                "description": "Status scene for a Neopixel module to subscribe to.  Set an initial value for scene to configure brightness, etc"
            },
            {
                "address": 10,
                "type": "f",
                "numValues": 1,
                "writeable": true,
                "name": "value1",
                "description": "Threshold for sub1"
            },
            {
                "address": 11,
                "type": "f",
                "numValues": 1,
                "writeable": true,
                "name": "value2",
                "description": "Threshold for sub2"
            },
            {
                "address": 12,
                "type": "f",
                "numValues": 1,
                "writeable": true,
                "name": "value3",
                "description": "Threshold for sub3"
            },
            {
                "address": 13,
                "type": "f",
                "numValues": 1,
                "writeable": true,
                "name": "value4",
                "description": "Threshold for sub4"
            }
        ],
        "sub": [
            {
                "address": 20,
                "addrAddress": 21,
                "type": "f",
                "numValues": 2,
                "name": "sub1",
                "description": "First parameter to monitor for status"
            },
            {
                "address": 22,
                "addrAddress": 23,
                "type": "f",
                "numValues": 2,
                "name": "sub2",
                "description": "First parameter to monitor for status"
            },
            {
                "address": 24,
                "addrAddress": 25,
                "type": "f",
                "numValues": 2,
                "name": "sub3",
                "description": "First parameter to monitor for status"
            },
            {
                "address": 26,
                "addrAddress": 27,
                "type": "f",
                "numValues": 2,
                "name": "sub4",
                "description": "First parameter to monitor for status"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/StatusModule.h"
        ]
    },
    "TankSteer": {
        "type": [
            "TankSteer"
        ],
        "inherits": [
            "Drone"
        ],
        "category": [
            "Logic"
        ],
        "description": [
            "Generate left and right motor speeds from target course, current heading and distance to target"
        ],
        "guide": [
            ""
        ],
        "config": [
            "[ TankSteer = 8 ]\n  name = TankSteer\n  mode = 1\n  trim = 0\n  PID = 0.02, 0, 0\n  limits = 0.2,1\n  threshold = 15\n  $target = @>Nav.adjTarget\n  $heading = @>50.8\n  $distance = @>Nav.distance\n  publish = moode, trim, PID, limits, threshold, target\n  publish = heading, distance, left, right"
        ],
        "pub": [
            {
                "address": 8,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "left",
                "description": "Left motor speed output in range -1..1"
            },
            {
                "address": 9,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "right",
                "description": "Right motor speed output in range -1..1"
            },
            {
                "address": 16,
                "type": "u8",
                "numValues": 1,
                "writeable": true,
                "name": "mode",
                "description": "1=Automated (responds to speed and turnRate subs) or 0=Manual (ignores subs, but speed and turnRate values can be directly written to)"
            },
            {
                "address": 14,
                "type": "f",
                "numValues": 1,
                "writeable": true,
                "name": "trim",
                "description": "Applied to turnRate value to correct left/right imbalance in motor power"
            },
            {
                "address": 12,
                "type": "f",
                "numValues": 3,
                "writeable": true,
                "name": "PID",
                "description": "PID settings for turnRate control"
            },
            {
                "address": 12,
                "type": "f",
                "numValues": 2,
                "writeable": true,
                "name": "limits",
                "description": "Min and max output speed range"
            },
            {
                "address": 13,
                "type": "f",
                "numValues": 1,
                "writeable": true,
                "name": "threshold",
                "description": "Distance in meters within which to throttle down to min limit"
            }
        ],
        "sub": [
            {
                "address": 20,
                "addrAddress": 21,
                "type": "f",
                "numValues": 1,
                "name": "target",
                "description": "Target heading (e.g. from Nav module)"
            },
            {
                "address": 22,
                "addrAddress": 23,
                "type": "f",
                "numValues": 1,
                "name": "heading",
                "description": "Current heading (e.g. from Compass)"
            },
            {
                "address": 24,
                "addrAddress": 25,
                "type": "f",
                "numValues": 1,
                "name": "distance",
                "description": "Distance to target, typically Nav.distance"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/TankSteerModule.h"
        ]
    },
    "Timer": {
        "type": [
            "Timer"
        ],
        "description": [
            "Emits a configured message on a set interval (WIP)"
        ],
        "filename": [
            "../DroneNode/src/droneModules/TimerModule.h"
        ]
    },
    "TurnRate": {
        "type": [
            "TurnRate"
        ],
        "inherits": [
            "Drone"
        ],
        "category": [
            "Logic"
        ],
        "description": [
            "Generate a turnRate command based on target vs current heading using a PID controller"
        ],
        "guide": [
            "<p>Steering commands are based on:<p>\n\n<ul>\n   <li>Sub to target heading</li>\n   <li>Sub to current heading</li>\n   <li>Tuning parameters (PID)</li>\n   <li>Generate turn rate</li>\n</ul>\n\n<h3>Gybe control</h3>\n<p>If heading error stays large (and same sign) for extended period, then attempt to gybe (i.e. go the longer way round the circle), until the sign of the error changes.</p>\n\n<p>Control parameters are:</p>\n\n<ul>\n <li>Error threshold to trigger the gybe timer (e.g. 30 degrees)</li>\n <li>Timeout duration (e.g. 10 seconds) after which to initiate the gybe</li>\n</ul>"
        ],
        "config": [
            "[TurnRate=8]\n  name=TurnRate\n  PID=0.005, 0.0, 0.0001\n  interval=50\n  threshold=30\n  timeout=25\n  $target=@>Polar.adjHeading\n  $heading=@>50.8\n  publish=target, heading, PID, turnRate, mode"
        ],
        "sub": [
            {
                "address": 10,
                "addrAddress": 11,
                "type": "f",
                "numValues": 1,
                "name": "target",
                "description": "Target heading (e.g. from Nav module)"
            },
            {
                "address": 12,
                "addrAddress": 13,
                "type": "f",
                "numValues": 1,
                "name": "heading",
                "description": "Current heading (e.g. from Compass)"
            },
            {
                "address": 14,
                "addrAddress": 15,
                "type": "f",
                "numValues": 3,
                "name": "PID",
                "description": "PID values (start with: 0.005 0.0 0.0001)"
            }
        ],
        "pub": [
            {
                "address": 16,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "turnRate",
                "description": "turnRate output in range -1..1, where 1 is clockwise"
            },
            {
                "address": 17,
                "type": "f",
                "numValues": 1,
                "writeable": true,
                "name": "threshold",
                "description": "Error threshold to trigger the gybe timer (default 20 degrees)"
            },
            {
                "address": 18,
                "type": "f",
                "numValues": 1,
                "writeable": true,
                "name": "timeout",
                "description": "Timeout duration in seconds after which to initiate the gybe (default 10s)"
            },
            {
                "address": 19,
                "type": "u8",
                "numValues": 1,
                "writeable": true,
                "name": "mode",
                "description": "Mode (0=normal, 1=potential gybe, 2=gybe)"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/TurnRateModule.h"
        ]
    },
    "UDPTelemetry": {
        "type": [
            "UDPTelemetry"
        ],
        "category": [
            "Networking"
        ],
        "description": [
            "Manages DroneLink telemetry using UDP broadcast over WiFi"
        ],
        "inherits": [
            "Drone"
        ],
        "config": [
            "[UDPTelemetry=2]\n  name=UDPT\n  port =8007\n  broadcast =255, 255, 255, 255"
        ],
        "pub": [
            {
                "address": 8,
                "type": "u32",
                "numValues": 1,
                "writeable": true,
                "name": "port",
                "description": "UDP port to broadcast to, default 8007"
            },
            {
                "address": 9,
                "type": "u8",
                "numValues": 4,
                "writeable": true,
                "name": "broadcast",
                "description": "IP address to broadcast to, default: 255,255,255,255"
            },
            {
                "address": 10,
                "type": "u32",
                "numValues": 3,
                "writeable": false,
                "name": "packets",
                "description": "Packet counters for sent, received and rejected"
            },
            {
                "address": 11,
                "type": "f",
                "numValues": 3,
                "writeable": false,
                "name": "speed",
                "description": "Packet rates per second for sent, received and rejected"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/UDPTelemetryModule.h"
        ]
    },
    "VL53L0X": {
        "type": [
            "VL53L0X"
        ],
        "inherits": [
            "I2CBase"
        ],
        "category": [
            "Input"
        ],
        "description": [
            "I2C VL53L0X laser distance sensor"
        ],
        "config": [
            "[VL53L0X = 8]\n  name= \"Laser\"\n  bus= 3\n  publish = distance"
        ],
        "I2CAddress": [
            "0x29"
        ],
        "pub": [
            {
                "address": 10,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "distance",
                "description": "Distance in mm"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/VL53L0XModule.h"
        ]
    },
    "WaterSensor": {
        "type": [
            "WaterSensor"
        ],
        "inherits": [
            "Drone"
        ],
        "category": [
            "Input"
        ],
        "description": [
            "Manages a simple Water sensor connected to a pair of pins"
        ],
        "guide": [
            ""
        ],
        "config": [
            "[WaterSensor = 5]\n  pins = 4, 34\n  threshold = 400\n  publish = raw, alarm"
        ],
        "pub": [
            {
                "address": 10,
                "type": "u8",
                "numValues": 2,
                "writeable": true,
                "name": "pins",
                "description": "Pins for the sensor: {output pin}, {analog pin}"
            },
            {
                "address": 11,
                "type": "u32",
                "numValues": 1,
                "writeable": false,
                "name": "raw",
                "description": "Raw analog reading (0..4095)"
            },
            {
                "address": 12,
                "type": "u32",
                "numValues": 1,
                "writeable": true,
                "name": "threshold",
                "description": "Level over which the alarm is triggered"
            },
            {
                "address": 13,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "alarm",
                "description": "Alarm value, 0=idle, 1=triggered"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/WaterSensorModule.h"
        ]
    },
    "Waypoint": {
        "type": [
            "Waypoint"
        ],
        "inherits": [
            "Drone"
        ],
        "category": [
            "Logic"
        ],
        "description": [
            "Load and manage a series of waypoints from a CSV file"
        ],
        "guide": [
            "<p>Load and manage stepping through a series of waypoints, defined in /waypoint.csv.</p>\n\n<p>Example:</p>\n<pre>\nlon,lat,radius\n-1.744739150337,51.541523406305,10.0\n-1.744404186599,51.542305699213,15.0\n-1.746584868898,51.542284441432,10.0\n-1.746516508951,51.541510651418,10.0\n</pre>"
        ],
        "config": [
            "[Waypoint=4]\n  name=Waypoint\n  $location=@>50.9\n  publish =mode, waypoint, waypoints, target, location"
        ],
        "sub": [
            {
                "address": 12,
                "addrAddress": 13,
                "type": "f",
                "numValues": 3,
                "name": "location",
                "description": "Location from GPS"
            }
        ],
        "pub": [
            {
                "address": 8,
                "type": "u8",
                "numValues": 1,
                "writeable": true,
                "name": "mode",
                "description": "Mode 0=normal, 1=Reload waypoint.csv"
            },
            {
                "address": 9,
                "type": "u8",
                "numValues": 1,
                "writeable": false,
                "name": "waypoints",
                "description": "How many waypoints are loaded"
            },
            {
                "address": 10,
                "type": "u8",
                "numValues": 1,
                "writeable": true,
                "name": "waypoint",
                "description": "Current waypoint number"
            },
            {
                "address": 11,
                "type": "f",
                "numValues": 3,
                "writeable": false,
                "name": "target",
                "description": "Target location of current waypoint, feed to Nav.target"
            },
            {
                "address": 14,
                "type": "u8",
                "numValues": 1,
                "writeable": true,
                "name": "loop",
                "description": "0=stop at end of file, 1=loop"
            },
            {
                "address": 15,
                "type": "f",
                "numValues": 3,
                "writeable": false,
                "name": "distance",
                "description": "[0] distance to next waypoint, [1] distance remaining on total path [2] Cumulative length of waypoint path in meters"
            },
            {
                "address": 16,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "speed",
                "description": "Approx speed along waypoint path in meters per second"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/WaypointModule.h"
        ]
    },
    "WindFromWing": {
        "type": [
            "WindFromWing"
        ],
        "inherits": [
            "Drone"
        ],
        "category": [
            "Logic"
        ],
        "description": [
            "Estimate Wind Direction from Wing Compass and Tail position"
        ],
        "guide": [
            "<p>Subscribe the Sailor module to the Wind output parameter, instead of a regular wind vane, to use the Wing as an estimator of the Wind angle.</p>"
        ],
        "config": [
            "[ WindFromWing = 12 ]\n  name = WindFromWing\n  AOA = 15\n  $wing = @>Sailor.wing\n  $heading = 64>10.22\n  publish = wing, heading, AOA, wind"
        ],
        "sub": [
            {
                "address": 10,
                "addrAddress": 11,
                "type": "f",
                "numValues": 1,
                "name": "wing",
                "description": "Wing tail command angle from Sailor.wing"
            },
            {
                "address": 12,
                "addrAddress": 13,
                "type": "f",
                "numValues": 1,
                "name": "heading",
                "description": "Current heading of the Wing from the Wing's Compass.heading"
            }
        ],
        "pub": [
            {
                "address": 14,
                "type": "f",
                "numValues": 1,
                "writeable": true,
                "name": "AOA",
                "description": "AOA obtained from a Wing value of 1... i.e. multiple Wing command by AOA value to get actual AOA"
            },
            {
                "address": 15,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "wind",
                "description": "Estimated Wind angle (world coordinates)"
            },
            {
                "address": 16,
                "type": "u8",
                "numValues": 1,
                "writeable": true,
                "name": "samples",
                "description": "Sample depth for moving average, 1 per interval (default 10)"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/WindFromWingModule.h"
        ]
    },
    "Wind": {
        "type": [
            "Wind"
        ],
        "inherits": [
            "I2CBase"
        ],
        "category": [
            "Input"
        ],
        "description": [
            "Manages a Wind speed and direction sensor."
        ],
        "guide": [
            "- Wind direction using I2C AS5600 sensor\n- Wind speed from cup anemometor on an digital input with internal pullup\n- Optional moving average with adjustable sample depth, 1 per interval"
        ],
        "config": [
            "[Wind= 14]\n  name= \"Wind\"\n  interval= 100\n  bus= 4\n  $heading= @>8.11\n  centre= -10\n  samples=10\n  publish= heading, direction, centre, wind"
        ],
        "I2CAddress": [
            "0x36"
        ],
        "pub": [
            {
                "address": 10,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "direction",
                "description": "local wind direction"
            },
            {
                "address": 11,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "speed",
                "description": "wind speed"
            },
            {
                "address": 12,
                "type": "u8",
                "numValues": 1,
                "writeable": true,
                "name": "pins",
                "description": "Pin to use for anemometer interrupt signal"
            },
            {
                "address": 13,
                "type": "f",
                "numValues": 1,
                "writeable": true,
                "name": "centre",
                "description": "Calibration for local wind direction"
            },
            {
                "address": 14,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "wind",
                "description": "World wind direction - combination of local direction and heading"
            },
            {
                "address": 15,
                "type": "u8",
                "numValues": 1,
                "writeable": true,
                "name": "mode",
                "description": "Operation mode 0=standard, 1=inverted (upside down, e.g. for water direction sensor), 2=anemometer"
            },
            {
                "address": 18,
                "type": "u8",
                "numValues": 1,
                "writeable": true,
                "name": "samples",
                "description": "Sample depth for moving average, 1 per interval (default 1, max 60)"
            },
            {
                "address": 19,
                "type": "f",
                "numValues": 1,
                "writeable": false,
                "name": "stats",
                "description": "Average variance relative to the moving average"
            }
        ],
        "sub": [
            {
                "address": 16,
                "addrAddress": 17,
                "type": "f",
                "numValues": 1,
                "name": "heading",
                "description": "Sub to compass heading to work out world wind direction"
            }
        ],
        "filename": [
            "../DroneNode/src/droneModules/WindModule.h"
        ]
    }
}